#! /usr/bin/env bash

# Distributed under the terms of the BSD 3-Clause license

# Takes no arguments.

PID_FILE='/tmp/notifaud-pids'
TIMEOUT=3
TITLE='Sound volume'
PROJECT_NAME=notifaud

VOLUME_HIGH_THRESHOLD=70
VOLUME_MED_THRESHOLD=40
VOLUME_HIGH_ICON=audio-volume-high
VOLUME_MED_ICON=audio-volume-medium
VOLUME_LOW_ICON=audio-volume-low
VOLUME_MUTED_ICON=audio-volume-muted

add-app-args() {
    args+=(--app-name="$PROJECT_NAME")
}

add-display-args() {
    local playback_info="$(amixer get Master playback)"
    local volume="$(echo "$playback_info" |
        sed -nE 's/.*\[([[:digit:]]+)%\].*/\1/p' | head -n1)"
    local muted
    echo "$playback_info" | grep -qE '\[off\]' && muted=y || muted=n

    local body="${volume}%"
    local icon
    if [ "$muted" = y ]; then
        icon="$VOLUME_MUTED_ICON"
    elif [ "$volume" -gt "$VOLUME_HIGH_THRESHOLD" ]; then
        icon="$VOLUME_HIGH_ICON"
    elif [ "$volume" -gt "$VOLUME_MED_THRESHOLD" ]; then
        icon="$VOLUME_MED_ICON"
    else
        icon="$VOLUME_LOW_ICON"
    fi

    args+=(--urgency=low --transient --expire-time="$((TIMEOUT * 1000))"
           --icon="$icon" "$TITLE" "$body")
}

create() {
    stdbuf -o0 notify-send --print-id --wait "$@" > "$PID_FILE"
    local res="$?"
    rm -f "$PID_FILE"
    return "$res"
}

update() {
    local id="$1"
    shift
    notify-send --replace-id="$id" "$@"
}

args=()
add-app-args
add-display-args
id="$(cat "$PID_FILE" 2> /dev/null)"

if [ -n "$id" ]; then
    update "$id" "${args[@]}" || create "${args[@]}"
else
    create "${args[@]}"
fi
